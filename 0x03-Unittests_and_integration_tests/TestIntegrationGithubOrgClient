@parameterized_class(("org_payload", "repos_payload", "expected_repos", "apache2_repos"), [
    (
        TEST_PAYLOAD["org_payload"],
        TEST_PAYLOAD["repos_payload"],
        TEST_PAYLOAD["expected_repos"],
        TEST_PAYLOAD["apache2_repos"],
    ),
])
# TestIntegrationGithubOrgClient.py
class TestIntegrationGithubOrgClient(unittest.TestCase):
    """Integration test with patch"""
# from fixtures import TEST_PAYLOAD
    @classmethod
    def setUpClass(cls):
        """Set up patch"""
        cls.get_patcher = patch('requests.get')
        cls.mock_get = cls.get_patcher.start()

        cls.mock_get.side_effect = [
            Mock(**{"json.return_value": cls.org_payload}),
            Mock(**{"json.return_value": cls.repos_payload}),
        ]
#        cls.mock_get.return_value.status_code = 200
    @classmethod
    def tearDownClass(cls):
        cls.get_patcher.stop()
#        """Tear down patch"""
    def test_public_repos(self):
        client = GithubOrgClient("test-org")
        self.assertEqual(client.public_repos(), self.expected_repos)
#        self.mock_get.assert_called_with("https://api.github.com/orgs/test-org/repos")
    def test_public_repos_with_license(self):
        client = GithubOrgClient("test-org")
        self.assertEqual(client.public_repos(license="apache-2.0"), self.apache2_repos)
